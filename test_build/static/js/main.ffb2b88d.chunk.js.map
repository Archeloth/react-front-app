{"version":3,"sources":["Nav.js","Upload.js","Recipe.js","Home.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Nav","to","exact","activeClassName","className","Upload","props","changeHandler","e","setState","target","name","value","submitHandler","state","ingredients","split","preventDefault","console","log","axios","defaults","headers","post","then","response","message","catch","error","owner","this","onSubmit","type","onChange","placeholder","Component","Recipe","map","ingredient","key","creationDate","onClick","window","confirm","delete","id","location","reload","Home","useState","recipes","setRecepies","useEffect","getRecepies","a","fetch","json","data","recipe","_id","Search","search","setSearch","results","setResults","status","length","pop","App","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffb2b88d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction Nav(){\r\n\r\n    return(\r\n        <nav>\r\n            <NavLink to=\"/\" exact={true} activeClassName=\"active\" className=\"nav-link\">\r\n                <h3>Home page</h3>\r\n            </NavLink>\r\n            <div className=\"nav-links\">\r\n                <NavLink to=\"/search\" activeClassName=\"active\" className=\"nav-link\">\r\n                    Search\r\n                </NavLink>\r\n                <NavLink to=\"/upload\" activeClassName=\"active\" className=\"nav-link\">\r\n                    Upload\r\n                </NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nclass Upload extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            ingredients: [],\r\n            owner: '',\r\n            message: ''\r\n        }\r\n    }\r\n\r\n\r\n    changeHandler = e => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    submitHandler = e => {\r\n\r\n        if(this.state.ingredients !== \"\" || this.state.name !== \"\"){\r\n            this.state.ingredients = this.state.ingredients.split(',');\r\n        }\r\n        \r\n        /*\r\n        ????????????????????????????????????????\r\n        let a = this.state.ingredients.split(',');\r\n        this.setState({ingredients: a});\r\n        */\r\n\r\n        e.preventDefault();\r\n\r\n        console.log(this.state);\r\n        \r\n        axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n        axios.post(\"https://public-recepy-api.herokuapp.com/recepts\", this.state)\r\n            .then(response => {\r\n                console.log(response);\r\n                this.setState({message: \"Update successful\"});\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.setState({message: \"Error while uploading\"});\r\n            })\r\n    }\r\n\r\n   \r\n    render(){\r\n        const {name, ingredients, owner} = this.state;\r\n        return(\r\n            <div>\r\n                <h3>Upload form</h3>\r\n                <p><b>Tips: </b>Separate the different ingredients with commas ( , )</p>\r\n                <form onSubmit={this.submitHandler} className=\"upload-form\">\r\n                    <input type=\"text\" name=\"name\" value={name} onChange={this.changeHandler} placeholder=\"Name\" />\r\n                    <input type=\"text\" name=\"ingredients\" value={ingredients} onChange={this.changeHandler} placeholder=\"Ingredients\" />\r\n                    <input type=\"text\" name=\"owner\" value={owner} onChange={this.changeHandler} placeholder=\"Owner\" />\r\n                    <button type=\"submit\" className=\"upload-submit\">Submit</button>\r\n                </form>\r\n                <p>{this.state.message}</p>\r\n            </div>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default Upload;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nconst Recipe = (props) => {\r\n\r\n    const deleteRecipe = (e) => {\r\n        const r = window.confirm(\"Are you sure you want to delete this recipe?\");\r\n        if(r === true){\r\n            axios.defaults.headers.delete['Access-Control-Allow-Origin'] = 'access-control-allow-origin';\r\n            axios.delete(\r\n                `https://public-recepy-api.herokuapp.com/recepts/${props.id}`,\r\n                'GET,POST,PATCH,DELETE',\r\n            )\r\n            .then(response => {\r\n                console.log(response);\r\n                window.location.reload();\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n        } else {\r\n            //Return\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className=\"recipe\">\r\n            <h1>{props.name}</h1>\r\n            <label>Ingredients:</label>\r\n            <ul>\r\n            {props.ingredients.map((ingredient) =>\r\n                <li key={ingredient}>{ingredient}</li>\r\n            )}\r\n            </ul>\r\n            \r\n            <p><span>Recipe Owner: </span><b>{props.owner}</b></p>\r\n            \r\n            <p><span>Created: </span><b>{props.creationDate}</b></p>\r\n\r\n            <ul className=\"recipe-links\">\r\n                <li className=\"modify\" key=\"modify\">Modify</li>\r\n                <li className=\"delete\" key=\"delete\" onClick={deleteRecipe}>Delete</li>\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, { useState, useEffect} from 'react';\r\nimport Recipe from './Recipe';\r\nimport './App.css';\r\n\r\nfunction Home(){\r\n    const apiEndpoint = \"https://public-recepy-api.herokuapp.com/recepts\";\r\n\r\n    const [recipes, setRecepies] = useState([]);\r\n\r\n    useEffect( () => {\r\n        getRecepies();\r\n    }, []);\r\n\r\n    const getRecepies = async () => {\r\n        const response = await fetch(apiEndpoint);\r\n        const data = await response.json();\r\n        setRecepies(data);\r\n        console.log(data);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Welcome to the best Cake recipe website!</h1>\r\n\r\n            <div className=\"recipes\">\r\n                {recipes.map(recipe => (\r\n                <Recipe \r\n                id={recipe._id}\r\n                name={recipe.name} \r\n                ingredients={recipe.ingredients} \r\n                owner={recipe.owner} \r\n                creationDate={recipe.creationDate.split('T')[0]}\r\n                />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react';\r\nimport Recipe from './Recipe';\r\nimport './App.css';\r\n\r\nfunction Search () {\r\n\r\n    const [recipes, setRecepies] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [results, setResults] = useState(0);\r\n\r\n    const apiEndpoint = \"https://public-recepy-api.herokuapp.com/recepts/search/\";\r\n\r\n    const updateSearch = e => {\r\n        setSearch(e.target.value);\r\n        if (e.target.value.length > 3) {\r\n            getRecepies();\r\n        } else {\r\n            while(recipes.length > 0) {\r\n                recipes.pop();\r\n            }\r\n            setResults(0);\r\n        }\r\n    }\r\n\r\n    const getRecepies = async () => {\r\n        const response = await fetch(apiEndpoint+search);\r\n        if(response.status === 200){\r\n            const data = await response.json();\r\n            setResults(data.length);\r\n            setRecepies(data);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <input type=\"text\" className=\"search-input\" value={search} onChange={updateSearch}/>\r\n            <p>Found recipes: {results}</p>\r\n            <div className=\"recipes\">\r\n                {recipes.map(recipe => (\r\n                <Recipe \r\n                id={recipe._id}\r\n                name={recipe.name} \r\n                ingredients={recipe.ingredients} \r\n                owner={recipe.owner} \r\n                creationDate={recipe.creationDate.split('T')[0]}\r\n                />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './App.css';\r\nimport Nav from './Nav';\r\nimport Upload from './Upload';\r\nimport Home from './Home';\r\nimport Search from './Search';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n\r\n  \r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Switch>\r\n            <Route path=\"/\" exact component={Home}/>\r\n        </Switch>\r\n        <Switch>\r\n            <Route path=\"/upload\" exact component={Upload}/>\r\n        </Switch>\r\n        <Switch>\r\n            <Route path=\"/search\" exact component={Search}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}